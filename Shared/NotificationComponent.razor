@using CompanyProductBlazor.Services.Interfaces
@inject INotificationService NotificationService
@implements IDisposable

@if (showNotification)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content @GetNotificationClass()">
                <div class="modal-header">
                    <h5 class="modal-title">@title</h5>
                    <button type="button" class="close" @onclick="CloseNotification" aria-label="Cerrar">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@message</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseNotification">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showNotification = false;
    private string title;
    private string message;
    private NotificationType type;

    protected override void OnInitialized()
    {
        NotificationService.OnNotification += ShowNotification;
    }

    private void ShowNotification(string notificationTitle, string notificationMessage, NotificationType notificationType)
    {
        title = notificationTitle;
        message = notificationMessage;
        type = notificationType;
        showNotification = true;
        StateHasChanged();
    }

    private void CloseNotification()
    {
        showNotification = false;
    }

    private string GetNotificationClass()
    {
        return type switch
        {
            NotificationType.Success => "border-success",
            NotificationType.Error => "border-danger",
            NotificationType.Warning => "border-warning",
            NotificationType.Info => "border-info",
            _ => ""
        };
    }

    public void Dispose()
    {
        NotificationService.OnNotification -= ShowNotification;
    }
}
