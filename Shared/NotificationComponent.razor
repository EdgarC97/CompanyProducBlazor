@using CompanyProductBlazor.Services.Interfaces
@inject INotificationService NotificationService
@implements IDisposable

@if (showNotification)
{
    <div class="notification-container @GetNotificationClass()">
        <div class="notification-header">
            <strong>@title</strong>
            <button type="button" class="close" @onclick="CloseNotification">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="notification-body">
            @message
        </div>
    </div>
}

@code {
    private bool showNotification = false;
    private string title;
    private string message;
    private NotificationType type;

    protected override void OnInitialized()
    {
        NotificationService.OnNotification += ShowNotification;
    }

    private void ShowNotification(string notificationTitle, string notificationMessage, NotificationType notificationType)
    {
        title = notificationTitle;
        message = notificationMessage;
        type = notificationType;
        showNotification = true;
        StateHasChanged();

        // Auto-hide after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            CloseNotification();
            StateHasChanged();
        });
    }

    private void CloseNotification()
    {
        showNotification = false;
    }

    private string GetNotificationClass()
    {
        return type switch
        {
            NotificationType.Success => "notification-success",
            NotificationType.Error => "notification-error",
            NotificationType.Warning => "notification-warning",
            NotificationType.Info => "notification-info",
            _ => "notification-info"
        };
    }

    public void Dispose()
    {
        NotificationService.OnNotification -= ShowNotification;
    }
}