@page "/companies/edit/{Id:int}"
@using CompanyProductBlazor.Models
@using CompanyProductBlazor.Services.Interfaces
@inject ICompanyService CompanyService
@inject INotificationService NotificationService
@inject NavigationManager NavigationManager

<h1>Editar Compañía</h1>

@if (loading)
{
    <p>Cargando...</p>
}
else if (company == null)
{
    <p class="text-danger">No se encontró la compañía</p>
}
else
{
    <EditForm Model="@company" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Nombre</label>
            <InputText @bind-Value="company.Name" class="form-control" />
            <ValidationMessage For="@(() => company.Name)" />
        </div>

        <div class="form-group">
            <label>Dirección</label>
            <InputText @bind-Value="company.Address" class="form-control" />
            <ValidationMessage For="@(() => company.Address)" />
        </div>

        <div class="form-group">
            <label>Teléfono</label>
            <InputText @bind-Value="company.Phone" class="form-control" />
        </div>

        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="company.Email" class="form-control" />
        </div>

        <div class="form-group">
            <label>Sitio Web</label>
            <InputText @bind-Value="company.WebSite" class="form-control" />
        </div>

        <div class="mt-3">
            <button class="btn btn-primary" type="submit" disabled="@isSaving">
                @(isSaving ? "Guardando..." : "Guardar")
            </button>
            <button class="btn btn-secondary" type="button" @onclick="NavigateToList">Cancelar</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }
    private Company company;
    private bool isSaving = false;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            company = await CompanyService.GetCompanyByIdAsync(Id);
        }
        catch (Exception ex)
        {
            NotificationService.ShowNotification("Error", ex.Message, NotificationType.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            await CompanyService.UpdateCompanyAsync(Id, company);
            NotificationService.ShowNotification("Éxito", "Compañía actualizada correctamente", NotificationType.Success);
            NavigateToList();
        }
        catch (Exception ex)
        {
            NotificationService.ShowNotification("Error", ex.Message, NotificationType.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void NavigateToList() => NavigationManager.NavigateTo("/companies");
}
